class Solution {
public:
    int singleNonDuplicate(vector<int>& arr) {
        int n = arr.size();
        int low = 0, high = n - 1;
       
        
        if (n == 1)
            return arr[0];
        
        while (low <= high) {
            int mid = (low + high) / 2;
            
            if (mid > 0) 
               {
								  if (arr[mid - 1] != arr[mid] && arr[mid + 1] != arr[mid]) return arr[mid];								
							 } 
            else 
              {
								if (arr[mid + 1] != arr[mid]) return arr[mid];
							}
                    
             int right = 0, left = 0;
            
            if (arr[mid - 1] == arr[mid]) {
                left = mid - 1;
                right = mid;
            } else if (arr[mid] == arr[mid + 1]) {
                right = mid + 1;
                left = mid;
            }

            if (left % 2 != 0)
                high = left - 1;
            else
                low = right + 1;
        }
        
       return 0;
    }
};
